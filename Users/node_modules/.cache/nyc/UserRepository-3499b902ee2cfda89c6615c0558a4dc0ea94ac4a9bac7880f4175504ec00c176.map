{"version":3,"file":"/home/mr-programmer/Projects/TR/Backend/Users/src/DataLayer/Repository/User/UserRepository.ts","sources":["/home/mr-programmer/Projects/TR/Backend/Users/src/DataLayer/Repository/User/UserRepository.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,6EAAuD;AAEvD,4CAAyD;AAEzD,kDAA6B;AAC7B,kGAAkF;AAElF;IAAA;IAgCA,CAAC;IA9BS,mCAAU,GAAhB,UAAiB,SAA0B;;;;;4BAExB,qBAAM,gBAAO,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAA;;wBAApD,QAAQ,GAAG,SAAyC;wBACpD,IAAI,GAAG,IAAI,cAAI,CAAC,SAAS,CAAC,SAAS,EAAE,SAAS,CAAC,QAAQ,EAAE,SAAS,CAAC,KAAK,EAAE,QAAQ,EAAE,SAAS,CAAC,MAAM,CAAC,CAAC;wBACvF,qBAAM,gBAAS,CAAC,KAAK,CAAC;gCACrC,YAAY,EAAE,IAAI,CAAC,YAAY;gCAC/B,WAAW,EAAE,IAAI,CAAC,WAAW;gCAC7B,KAAK,EAAE,IAAI,CAAC,KAAK;gCACjB,SAAS,EAAE,IAAI,CAAC,SAAS;gCACzB,MAAM,EAAE,IAAI,CAAC,MAAM;gCACnB,QAAQ,EAAE,IAAI,CAAC,QAAQ;gCACvB,OAAO,EAAE,IAAI,CAAC,QAAQ;gCACtB,QAAQ,EAAE,IAAI,CAAC,QAAQ;gCACvB,MAAM,EAAE,IAAI,CAAC,MAAM;gCACnB,QAAQ,EAAE,IAAI,CAAC,QAAQ;gCACvB,aAAa,EAAE,IAAI,CAAC,aAAa;gCACjC,UAAU,EAAE,IAAI,CAAC,UAAU;6BAC9B,CAAC,EAAA;;wBAbE,YAAY,GAAG,SAajB;wBACF,sBAAO,IAAI,OAAO,CAAM,UAAC,OAAO,EAAE,MAAM;gCACpC,YAAY,CAAC,IAAI,EAAE;qCACd,IAAI,CAAC,UAAA,IAAI;oCACN,OAAO,CAAC,mBAAe,CAAC,kBAAkB,CAAC,kBAAkB,EAAE,IAAI,CAAC,CAAC,CAAC;gCAC1E,CAAC,CAAC;qCACD,KAAK,CAAC,UAAA,KAAK;oCACR,MAAM,CAAC,mBAAe,CAAC,WAAW,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;gCAC1D,CAAC,CAAC,CAAA;4BACV,CAAC,CAAC,EAAA;;;;KAEL;IAEL,qBAAC;AAAD,CAAC,AAhCD,IAgCC","sourcesContent":["import User from \"../../../Domain/Aggregate/User/user\";\nimport { CreateUserModel } from \"../../../ViewModel/UserViewModel/CreateUSerViewModel\";\nimport { UserModel, UserDoc } from '../../Contenxt/User';\nimport { IUserRepository } from \"./IUserRepository\";\nimport bcrypte from 'bcrypt';\nimport OperationResult from \"@nodeidentity/common/build/core/operation/Operation\";\n\nexport default class UserRepository implements IUserRepository {\n\n    async CreateUser(userModel: CreateUserModel): Promise<OperationResult<UserDoc>> {\n\n        let password = await bcrypte.hash(userModel.password, 5);\n        let user = new User(userModel.firstName, userModel.lastName, userModel.email, password, userModel.gender);\n        let addUserModel = await UserModel.build({\n            confirmEmail: user.ConfirmEmail,\n            accountFail: user.Accountfail,\n            email: user.email,\n            firstName: user.firstName,\n            gender: user.Gender,\n            isActive: user.isActive,\n            isAdmin: user.isActive,\n            lastName: user.lastName,\n            locked: user.Locked,\n            password: user.password,\n            securityStamp: user.SecurityStamp,\n            lockedDate: user.LockedDate\n        });\n        return new Promise<any>((resolve, reject) => {\n            addUserModel.save()\n                .then(data => {\n                    resolve(OperationResult.BuildSuccessResult('operation result', data));\n                })\n                .catch(error => {\n                    reject(OperationResult.BuildFailur(error.toString()));\n                })\n        })\n\n    }\n\n}"]}